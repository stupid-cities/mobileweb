extends _layout
include _components

prepend head
  - let title = 'Map'
  - let description = 'This page displays a map and allows you to drop a pin and upload an image, along with comments, to record problems in your area'

append head
  <script src="https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js"></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css" rel="stylesheet" />

prepend body
  - let bodyClass = 'page-map'
  - let hasInfo = true

block content
  header.header-main.back-dark
    h1(aria-hidden="false") Stupid Cities
    nav
      a.btn--ui(href="/" aria-labelledby="label-homelink")
        span#label-homelink Go to homescreen
        include ../public/images/SC.svg

      button#infoIcon.btn--ui(aria-labelledby='label-info')
        span#label-info Information
        +svg('info')

      a.btn--ui(href="add" aria-labelledby='label-maplink')
        span#label-maplink Go to add
        +svg('pin')

  #map

prepend overlays
  .alert.info(class=alert ? 'hidden' : '')
    p Browse the map to see where there might be issues in your local area. You can also choose the list view
    +closeButton()

block scripts
  script.
    mapboxgl.accessToken = 'pk.eyJ1Ijoiam9zZXBod2lsayIsImEiOiJjazVxcDRtY3YwNGVqM2xvNnJobTB0cHpjIn0.C-6rOSTM39XSSutwoOurkA';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/light-v10',
      center: [-2.3820395, 51.3801519],
      zoom: 14,
    });
    // Add zoom and rotation controls to the map.
    map.addControl(new mapboxgl.NavigationControl());

    //var others   =  ['==', ['get', 'rating'], null];
    var good      = ['==', ['get', 'rating'], 0];
    var sad       = ['==', ['get', 'rating'], 1];
    var angry     = ['==', ['get', 'rating'], 2];
    var danger    = ['==', ['get', 'rating'], 3];

    var colors = ['green', 'orange', 'orange', 'red'];


    map.on('load', function() {
      map.addSource('ma', {
           type: 'geojson',
           cluster: true,
           data: '/events',
           'clusterRadius': 80,
            clusterMaxZoom: 14,
           'clusterProperties': {
            'good':    ['+', ['case', good, 1, 0]],
            'sad':    ['+', ['case', sad, 1, 0]],
            'angry':    ['+', ['case', angry, 1, 0]],
            'danger':     ['+', ['case', danger,  1, 0]],
           },
      });

      map.addLayer({
        'filter': ['!=', 'cluster', true],
        'id': 'population',
        'type': 'circle',
        'source': 'ma',
        paint: {
          'circle-opacity': 0.6,
          'circle-stroke-color': ['case',
            good,   'green',
            danger,    'red',
            'green'],
          'circle-stroke-width': 3,
          'circle-color': '#fff',
          }
        });


        map.addLayer({
          'filter': ['!=', 'cluster', true],
          id: 'cluster-count2',
          type: 'symbol',
          source: 'ma',
          layout: {
          'text-field': '1',
          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
          'text-size': 8
          }
          });

        map.addLayer({
          filter: [">=", "point_count", 1],
          id: 'cluster-count',
          type: 'symbol',
          source: 'ma',
          layout: {
          'text-field': '{point_count_abbreviated}',
          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
          'text-size': 14
          }
          });


          // inspect a cluster on click
          map.on('click', 'clusters', function(e) {
          var features = map.queryRenderedFeatures(e.point, {
          layers: ['clusters']
          });
          var clusterId = features[0].properties.cluster_id;
          map.getSource('ma').getClusterExpansionZoom(
          clusterId,
          function(err, zoom) {
          if (err) return;

          map.easeTo({
          center: features[0].geometry.coordinates,
          zoom: zoom
          });
          }
          );
          });


          // objects for caching and keeping track of HTML marker objects (for performance)
          var markers = {};
          var markersOnScreen = {};

          function updateMarkers() {
          var newMarkers = {};
          var features = map.querySourceFeatures('ma');

          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),
          // and add it to the map if it's not there already
          for (var i = 0; i < features.length; i++) {
          var coords = features[i].geometry.coordinates;
          var props = features[i].properties;
          if (!props.cluster) continue;
          var id = props.cluster_id;

          var marker = markers[id];
          if (!marker) {
          var el = createDonutChart(props);
          marker = markers[id] = new mapboxgl.Marker({
            element: el
          }).setLngLat(coords);
          }
          newMarkers[id] = marker;

          if (!markersOnScreen[id]) marker.addTo(map);
          }
          // for every marker we've added previously, remove those that are no longer visible
          for (id in markersOnScreen) {
          if (!newMarkers[id]) markersOnScreen[id].remove();
          }
          markersOnScreen = newMarkers;
          }

          // after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend
          map.on('data', function(e) {
            if (e.sourceId !== 'ma' || !e.isSourceLoaded) return;
            map.on('move', updateMarkers);
            map.on('moveend', updateMarkers);
            updateMarkers();
          });


          // code for creating an SVG donut chart from feature properties
          function createDonutChart(props) {
          var offsets = [];
          var counts = [
          props.good,
          props.sad,
          props.angry,
          props.danger,
          ];
          var total = 0;
          for (var i = 0; i < counts.length; i++) {
          offsets.push(total);
          total += counts[i];
          }
          var fontSize =
          total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;
          var r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;
          var r0 = Math.round(r * 0.6);
          var w = r * 2;

          var html =
          '<div><svg width="' +
          w +
          '" height="' +
          w +
          '" viewbox="0 0 ' +
          w +
          ' ' +
          w +
          '" text-anchor="middle" style="font: ' +
          fontSize +
          'px sans-serif">';

          for (i = 0; i < counts.length; i++) {
          html += donutSegment(
          offsets[i] / total,
          (offsets[i] + counts[i]) / total,
          r,
          r0,
          colors[i]
          );
          }
          html +=
          '<circle cx="' +
          r +
          '" cy="' +
          r +
          '" r="' +
          r0 +
          '" fill="white" /><text dominant-baseline="central" transform="translate(' +
          r +
          ', ' +
          r +
          ')">' +
          total.toLocaleString() +
          '</text></svg></div>';

          var el = document.createElement('div');
          el.innerHTML = html;
          return el.firstChild;
          }

          function donutSegment(start, end, r, r0, color) {
          if (end - start === 1) end -= 0.00001;
          var a0 = 2 * Math.PI * (start - 0.25);
          var a1 = 2 * Math.PI * (end - 0.25);
          var x0 = Math.cos(a0),
          y0 = Math.sin(a0);
          var x1 = Math.cos(a1),
          y1 = Math.sin(a1);
          var largeArc = end - start > 0.5 ? 1 : 0;

          return [
          '<path d="M',
          r + r0 * x0,
          r + r0 * y0,
          'L',
          r + r * x0,
          r + r * y0,
          'A',
          r,
          r,
          0,
          largeArc,
          1,
          r + r * x1,
          r + r * y1,
          'L',
          r + r0 * x1,
          r + r0 * y1,
          'A',
          r0,
          r0,
          0,
          largeArc,
          0,
          r + r0 * x0,
          r + r0 * y0,
          '" fill="' + color + '" />'
          ].join(' ');
          }

      });
